
ul {
  list-style: none;
  height: 500px;
  padding: 0;
  border: 1px solid red;
  background-color: #e8e8e9;

  display: flex; /* flex | inline-flex */

  /* flex-direction | flex-wrap| flex-flow | justify-content | align-items | align-content */

  // flex-direction: row; /* row | column | row-reverse | column-reverse 
  //                         排列的方向，默认为 row，从左往右
  //                      */
  // flex-wrap: wrap; /* nowrap | wrap | wrap-reverse
  //                       是否换行，默认为 nowrap
  //                    */
  // /* flex-flow: row nowrap; /* 以上两个属性的简写 */

  // justify-content: flex-start; /* flex-start | flex-end | center | space-between | space-around
  //                                    主轴上的对齐方式，默认为 flex-start
  //                                    space-between: 两端对齐，项目之间的间隔都相等
  //                                    space-around: 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍
  //                              */
  // align-items: stretch; /* flex-start | flex-end | center | stretch | baseline
  //                         交叉轴上的对齐方式，默认为 stretch
  //                         stretch: 如果项目未设置高度或设为auto，将占满整个容器的高度
  //                         baseline: 项目的第一行文字的基线对齐
  //                      */
  // align-content: stretch; /* flex-start | flex-end | center | stretch | space-between | space-around
  //                            用于多行的容器，如果项目只有一根轴线，该属性不起作用，默认为 stretch
  //                            flex-start: 与交叉轴的起点对齐
  //                            flex-end: 与交叉轴的终点对齐
  //                            center: 与交叉轴的中点对齐
  //                            space-between: 与交叉轴两端对齐，轴线之间的间隔平均分布
  //                            space-around: 每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍
  //                            stretch: 轴线占满整个交叉轴。(如何项目没有设置高度的话)
  //                            */
}

li {
  width: 100px;
  // height: 100px;
  background-color: #8cacea;
  color: #fff;
  margin: 8px;
  padding: 5px;

  /* order | flex-grow | flex-shrink | flex-basis | flex | align-self */

  // order: 0; /* <integer>
  //             定义项目的排列顺序。数值越小，排列越靠前，默认为0，可以为负值
  //           */
  // flex-grow: 0; /* <number>
  //                 定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大
  //                 如果所有项目的 flex-grow 属性都为1，则它们将等分剩余空间（如果有的话）
  //                 如果一个项目的 flex-grow 属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍
  //               */
  // flex-shrink: 1; /* <number>
  //                   定义项目的缩小比例，默认为1，即如果空间不足，该项目将缩小
  //                   如果所有项目的 flex-shrink 属性都为1，当空间不足时，都将等比例缩小
  //                   如果一个项目的 flex-shrink 属性为0，其他项目都为1，则空间不足时，前者不缩小
  //                   不能为负值
  //                 */
  // flex-basis: auto; /* <length> | auto
  //                     指定 flex 项目的初始大小，默认为 auto，可以取适用于 width 的任何值，% | em | rem | px
  //                     指定值后即设定了一个固定的宽度
  //                   */
  // flex: 0 1 auto; /* 以上三个属性的缩写 
  //                    有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)
  //                    flex: 正数; 等同于 flex: 正数 1 0;
  //                 */
  // align-self: auto; /* auto | flex-start | flex-end | center | baseline | stretch
  //                      允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性
  //                      默认值为auto，表示继承父元素的align-items属性
  //                      如果没有父元素，则等同于stretch
  //                   */
}
// li:nth-of-type(2) {
//   order: -2;
//   align-self: flex-end;
// }
// li:nth-of-type(3) {
//   order: -1;
// }